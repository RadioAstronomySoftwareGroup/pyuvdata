jobs:
- job: ext_pip
  pool:
    vmImage: "ubuntu-latest"
  variables:
    WITH_SUDO: true
  strategy:
    matrix:
      hera_cal:
          NAME: "hera_cal"
          PYTHON: "3.13"
          REPO: https://github.com/HERA-Team/hera_cal.git
          PIP_INSTALL_ARGS: ".[dev]"
          PYTEST_ARGS: "-n auto"
      hera_qm:
          NAME: "hera_qm"
          PYTHON: "3.12"
          REPO: https://github.com/HERA-Team/hera_qm.git
          PIP_INSTALL_ARGS: ".[tests]"
          PYTEST_ARGS: "-n auto"
      pyradiosky:
          NAME: "pyradiosky"
          PYTHON: "3.13"
          REPO: https://github.com/RadioAstronomySoftwareGroup/pyradiosky.git
          PIP_INSTALL_ARGS: ".[dev]"
          PYTEST_ARGS: ""
      SSINS:
          NAME: "SSINS"
          PYTHON: "3.13"
          REPO: https://github.com/mwilensky768/SSINS.git
          PIP_INSTALL_ARGS: ".[plot]"
          PYTEST_ARGS: "-n auto"

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON)

  - bash: |
      cd ../
      git clone ${REPO}
      cd s
    displayName: clone $(NAME)

  - bash: |
      pip install .[test]
    displayName: install pyuvdata

  - bash: |
      cd ../${NAME}
      pip install ${PIP_INSTALL_ARGS}
    displayName: install $(NAME)

  # re-install pyuvdata last to ensure the checked out code is installed
  # (because sometimes hera_cal pins to weird things and overwrites the earlier install.)
  # keep the earlier install because it ensures the right dependencies are grabbed.
  - bash: |
      cd s
      pip install .[test]
    displayName: install pyuvdata

  - bash: |
      pip list
    displayName: Environment Info

  - bash: |
      cd ../${NAME}
      pytest ${PYTEST_ARGS}
    displayName: run $(NAME) tests


- job: ext_conda
  pool:
    vmImage: "ubuntu-latest"
  strategy:
    matrix:
      pyuvsim:
        NAME: "pyuvsim"
        PYTHON: "3.12"
        ENV_NAME: pyuvsim_tests_openmpi
        WITH_SUDO: true
        REPO: https://github.com/RadioAstronomySoftwareGroup/pyuvsim.git
        PYTEST_ARGS: "-n auto"

  steps:
  - bash: |
      cd ../
      git clone ${REPO}
      cd s
    displayName: clone $(NAME)

  - bash: wget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | sudo tar -C / -xvj bin/micromamba
    displayName: Install Micromamba

  - bash: |
      micromamba info
      # need to add gxx and gcc to build novas and cython
      # numba should be removed after next pyuvdata release (>3.2.1)
      # note different spelling of yaml extension
      micromamba create --name=${ENV_NAME}  python=$PYTHON gxx gcc numba -f ../$(NAME)/ci/${ENV_NAME}.yaml -yq
    displayName: configure conda environment

  - bash: |
      source ./ci/_activate_current_env.sh
      micromamba list -n ${ENV_NAME}
      # check that the python version matches the desired one; exit immediately if not
      PYVER=`python -c "import sys; print('{:d}.{:d}'.format(sys.version_info.major, sys.version_info.minor))"`
      if [[ $PYVER != $PYTHON ]]; then
        exit 1;
      fi
    displayName: Verify Mamba Config

  # install this version of pyuvdata
  - bash: |
      source ./ci/_activate_current_env.sh
      pip install --no-deps .
    displayName: install pyuvdata

  - bash: |
      source ./ci/_activate_current_env.sh
      cd ../$(NAME)
      pip install --no-deps .
    displayName: install $(NAME)

  - bash: |
      source ./ci/_activate_current_env.sh
      cd ../$(NAME)
      pytest ${PYTEST_ARGS}
    displayName: run $(NAME) tests
